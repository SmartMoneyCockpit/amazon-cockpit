from __future__ import annotations
import pandas as pd
from workers import etl
from utils import finance_exporter
from utils import finance_source
from utils.sheets_writer import write_df
from utils.alerts_plus import load_thresholds, low_doc_alerts, compliance_due_alerts, ppc_negatives_surge, margin_breach_alerts
from utils.actions_plus import build_actions_with_margins
from scripts import daily_digest

def run_all():
    etl.run_job("refresh_orders_inventory_finances", etl.refresh_orders_inventory_finances)
    etl.run_job("monthly_profitability_rollup", etl.monthly_profitability_rollup)

    df = finance_source.read_profitability_monthly()
    if isinstance(df, pd.DataFrame) and not df.empty:
        finance_exporter.export_summary_to_sheet(df, tab_name="finance_summary")

    th = load_thresholds()
    try:
        from utils import sheets_bridge as SB
        kws = SB.read_tab("keywords")
        if isinstance(kws, pd.DataFrame) and not kws.empty:
            write_df("a_plus_snapshot", kws)
    except Exception:
        pass

    try:
        doc_df = low_doc_alerts(int(th.get("doc_days_low", 10)))
        if isinstance(doc_df, pd.DataFrame) and not doc_df.empty:
            write_df("alerts_out_low_doc", doc_df)
    except Exception:
        pass

    try:
        comp_df = compliance_due_alerts(int(th.get("compliance_due_days", 30)))
        if isinstance(comp_df, pd.DataFrame):
            write_df("alerts_out_compliance", comp_df)
    except Exception:
        pass

    try:
        ppc_df = ppc_negatives_surge(float(th.get("ppc_min_spend", 10.0)), int(th.get("ppc_min_clicks", 12)))
        if isinstance(ppc_df, pd.DataFrame) and not ppc_df.empty:
            write_df("alerts_out_ppc", ppc_df)
    except Exception:
        pass

    try:
        mb = margin_breach_alerts(float(th.get('net_margin_min_pct', 0.0)), float(th.get('gross_margin_min_pct', 15.0)))
        if isinstance(mb, pd.DataFrame) and not mb.empty:
            write_df("alerts_out_margins", mb)
    except Exception:
        pass

    try:
        actions = build_actions_with_margins(th)
        if isinstance(actions, pd.DataFrame) and not actions.empty:
            write_df("actions_out", actions)
    except Exception:
        pass

    try:
        daily_digest.generate()
    except Exception:
        pass

    return True
